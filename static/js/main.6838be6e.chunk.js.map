{"version":3,"sources":["assets/usage.csv","components/searchComponent.jsx","components/graphComponent.jsx","components/TeamComponent.jsx","services/combination-service.js","components/teamBuilderComponent.jsx","App.js","serviceWorker.js","index.js","assets/strength-table.csv","assets/strategies.csv"],"names":["module","exports","React","Component","GraphComponent","props","data","labels","datasets","label","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","values","strengthValueAxisOption","ticks","min","max","stepSize","chartOptionsBar","maintainAspectRatio","scales","yAxes","chartOptionsHorizontal","xAxes","Container","fluid","className","Row","Col","query","style","height","width","options","TeamComponent","num","pokemonList","onChange","Error","pokemonSlots","defaultTeamIndices","i","id","enabled","state","event","pokemons","this","concat","target","checked","setState","validTeamPokemonIndices","value","push","key","forEach","listPoke","name","filter","x","map","y","poke","index","InputGroup","Prepend","Checkbox","e","onCheckboxChange","FormControl","as","onInputChange","teamPokemonOptions","CombinationService","strengthRows","columns","loadStrTablePromise","Promise","resolve","reject","a","axios","get","strengthTableUrl","strengthTableTextRes","loadStrTableResult","loadStrengthTable","console","log","loadStrategiesPromise","strategiesUrl","strategiesTextRes","loadStrategyInfoToStrTable","all","tableText","tableRows","replace","split","slice","isEmptyString","length","row","every","records","strengthRow","trim","v","parseFloat","strategiesText","strategiesRow","parseInt","type","hasBoost","indexOf","find","strategyType","usageText","usageRows","usageInfo","usageMap","Map","usage","set","usageBaseRatio","undefined","duplicateCounts","vector","firstPokemonIndex","firstPoke","compatibleStrTypes","compatibleTypes","secondPoke","searchMinimumRow","filterStrengthRows","v1","v2","cosineSimilarity","vectorFirstAndSecond","addVector","JSON","stringify","maximumValueStep34","Number","MIN_SAFE_INTEGER","thirdPoke","fourthPoke","filteredStrRows34","j","cropedV1","cropedV2","k","combinedVector","cos","absSin","Math","sqrt","product","dotProduct","vector4Pokemons","addVectors","maximumValueStep5","filteredStrRows5","fifthPoke","vector5Pokemons","weakestSlot","weakestValue","MAX_VALUE","sixthPoke","searchMaximumRow","finalVector","targetVector","evaluationFunc","minimumValue","minimumRow","strRow","val","arguments","newVec","elementsSum","vector1","vector2","l2norm","sum","acceptableTypes","teamPokemonIndices","allZero","pokemonVectors","pokeIndexStr","pokeIndex","TeamBuilderComponent","combinationService","loading","loadMasterData","then","teamPokemonNameMap","getAllTeamPokemonNames","toString","strVectorColumns","getAllTargetPokemonNames","error","indices","teamStrengthValues","strValuesOfTeam","md","onChangeTeamPokemons","App","Navbar","bg","Brand","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.6838be6e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/usage.706fcf81.csv\";","import React from 'react';\r\n// import './App.css';\r\n// import { combinationCalculator } from './combination-calculator';\r\nimport { Container, Row, Col } from 'react-bootstrap'\r\n\r\nexport class SearchComponent extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    return (\r\n    <>\r\n      <Container fluid>\r\n        <Row>\r\n          <Col>\r\n            <h1>New Search</h1>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </>\r\n    )};\r\n}\r\n","import React from 'react';\r\nimport { Row, Col, Container } from \"react-bootstrap\";\r\nimport {Bar, HorizontalBar} from 'react-chartjs-2';\r\nimport MediaQuery from \"react-responsive\";\r\n\r\nexport const GraphComponent = (props) => {\r\n  const labels = props.labels;\r\n  const values = props.values;\r\n\r\n  const data = {\r\n    labels: labels,\r\n    datasets: [\r\n      {\r\n        label: 'Team strength value to each target Pokemon',\r\n        backgroundColor: 'rgba(255,99,132,0.2)',\r\n        borderColor: 'rgba(255,99,132,1)',\r\n        borderWidth: 1,\r\n        hoverBackgroundColor: 'rgba(255,99,132,0.4)',\r\n        hoverBorderColor: 'rgba(255,99,132,1)',\r\n        data: values\r\n      }\r\n    ]\r\n  };\r\n\r\n  const strengthValueAxisOption = [{\r\n    ticks: {\r\n      min: -1024*4,\r\n      max: 1024*4,\r\n      stepSize: 1024\r\n    }\r\n  }];\r\n\r\n  const chartOptionsBar = {\r\n    maintainAspectRatio: false,\r\n    scales: {\r\n      yAxes: strengthValueAxisOption\r\n    }\r\n  }  \r\n\r\n  const chartOptionsHorizontal = {\r\n    maintainAspectRatio: false,\r\n    scales: {\r\n      xAxes: strengthValueAxisOption\r\n    }\r\n  }  \r\n\r\n  return (\r\n    <>\r\n      <Container fluid className=\"mt-5\">\r\n        <Row>\r\n          <Col>\r\n            <h2>Your Team's Strength</h2>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n          <MediaQuery query=\"(max-width: 767px)\">\r\n            <div style={{height: 500}}>\r\n              <HorizontalBar\r\n                data={data}\r\n                width={1000}\r\n                height={500}\r\n                options={chartOptionsHorizontal}\r\n              />\r\n            </div>          \r\n          </MediaQuery>\r\n          <MediaQuery query=\"(min-width: 768px)\">\r\n            <div style={{height: 500}}>\r\n              <Bar\r\n                data={data}\r\n                width={100}\r\n                height={50}\r\n                options={chartOptionsBar}\r\n              />\r\n            </div>\r\n          </MediaQuery>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  );\r\n}","import React from 'react';\r\nimport { Container, Row, Col, InputGroup, FormControl } from 'react-bootstrap'\r\n\r\nexport class TeamComponent extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.num = props.num;\r\n    this.pokemonList = props.pokemonList;\r\n    this.onChange = props.onChange;\r\n    if (!this.num || this.num < 1) {\r\n      throw new Error ('Error: team length must be more than 0');\r\n    }\r\n\r\n    const pokemonSlots = [];\r\n    const defaultTeamIndices = [\"18\", \"11\", \"23\", \"25\", \"2\", \"21\"];\r\n    for (let i = 0; i < this.num; i++) {\r\n      pokemonSlots[i] = {\r\n        id: defaultTeamIndices[i],\r\n        enabled: true\r\n      }\r\n    }\r\n\r\n    this.state = {\r\n      pokemonSlots: pokemonSlots\r\n    }\r\n  }\r\n\r\n  onCheckboxChange(num, event) {\r\n    const pokemons = this.state.pokemonSlots.concat();\r\n    pokemons[num].enabled = event.target.checked;\r\n\r\n    this.setState({\r\n      pokemons: pokemons\r\n    });\r\n\r\n    this.onChange(this.validTeamPokemonIndices());\r\n  }\r\n\r\n  onInputChange(num, event) {\r\n    const pokemons = this.state.pokemonSlots.concat();\r\n    pokemons[num].id = event.target.value;\r\n\r\n    this.setState({\r\n      pokemons: pokemons\r\n    });\r\n\r\n    this.onChange(this.validTeamPokemonIndices());\r\n  }\r\n\r\n  teamPokemonOptions() {\r\n    const options = [];\r\n    options.push(<option key={-1} value={-1}> </option>); // empty\r\n    this.pokemonList.forEach(listPoke => options.push(<option key={listPoke.id} value={listPoke.id}>{listPoke.name}</option>));\r\n    return options;\r\n  }\r\n\r\n  validTeamPokemonIndices() {\r\n    return this.state.pokemonSlots.filter(x => x.enabled && x.id !== \"-1\").map(y => y.id);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n    <>\r\n      <Container fluid>\r\n        <Row>\r\n          <Col>\r\n            <Row>\r\n              <Col>\r\n                <h2>Your Team</h2>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                <div>\r\n                    {\r\n                      this.state.pokemonSlots && this.state.pokemonSlots.map((poke, index) => \r\n                        <InputGroup className=\"mb-2\" key={index} style={{width: 200}}>\r\n                          <InputGroup.Prepend>\r\n                            <InputGroup.Checkbox checked={poke.enabled} onChange={(e) => this.onCheckboxChange(index, e)}/>\r\n                          </InputGroup.Prepend>\r\n                          <FormControl as=\"select\" value={poke.id} onChange={(e) => this.onInputChange(index, e)}>\r\n                            {this.teamPokemonOptions()}\r\n                          </FormControl>\r\n                        </InputGroup>\r\n                      )\r\n                    }\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  )};\r\n}\r\n","import strengthTableUrl from '../assets/strength-table.csv';\r\nimport strategiesUrl from '../assets/strategies.csv';\r\nimport usageUrl from '../assets/usage.csv';\r\nimport axios from 'axios';\r\n\r\nexport class CombinationService {\r\n\r\n  constructor() {\r\n    this.strengthRows = null;\r\n    this.columns = null;\r\n  }\r\n\r\n  async loadMasterData() {\r\n    const loadStrTablePromise = new Promise(async (resolve, reject) => {\r\n      try {\r\n        const strengthTableTextRes = await axios.get(strengthTableUrl);\r\n        const loadStrTableResult = this.loadStrengthTable(strengthTableTextRes.data);\r\n        this.strengthRows = loadStrTableResult.strengthRows;\r\n        this.columns = loadStrTableResult.columns;\r\n        console.log(`strength table was successfully loaded`);\r\n        resolve();\r\n      } catch (error) {\r\n        reject(error);\r\n        throw new Error('Error: failed to get strength table data from URL')\r\n      }\r\n    });\r\n\r\n    await Promise.resolve(loadStrTablePromise);\r\n\r\n    const loadStrategiesPromise = new Promise(async (resolve, reject) => {\r\n      try {\r\n        const strategiesTextRes = await axios.get(strategiesUrl);\r\n        this.loadStrategyInfoToStrTable(strategiesTextRes.data, this.strengthRows);\r\n        console.log(`strategy information was successfully loaded`);\r\n        resolve();\r\n      } catch (error) {\r\n        reject(error);\r\n        throw new Error('Error: failed to get strategy data from URL')\r\n      }\r\n    });\r\n\r\n    // const loadUsageInfoPromise = new Promise(async (resolve, reject) => {\r\n    //   try {\r\n    //     const usageTextRes = await axios.get(usageUrl);\r\n    //     this.loadUsageInfo(usageTextRes.data, this.columns, this.strengthRows);\r\n    //     console.log(`usage information was successfully loaded`);\r\n    //     resolve();\r\n    //   } catch (error) {\r\n    //     reject(error);\r\n    //     throw new Error('Error: failed to get usage data from URL')\r\n    //   }\r\n    // });\r\n\r\n    // await Promise.all([loadStrategiesPromise, loadUsageInfoPromise]);\r\n    await Promise.all([loadStrategiesPromise]);\r\n  }\r\n\r\n  loadStrengthTable(tableText) {\r\n    tableText = tableText.replace('\\r\\n', '\\n');\r\n    let tableRows = tableText.split('\\n');\r\n      \r\n    const columns = tableRows[0].split(',').slice(1).filter(x => !this.isEmptyString(x));\r\n    console.log(`${columns.length} columns exist`);\r\n    \r\n    let strengthRows = []; \r\n    let index = 0;\r\n    tableRows.slice(1).forEach(row => {\r\n      if (!row) {\r\n        return;\r\n      }\r\n    \r\n      if (row.split(',').every(x => this.isEmptyString(x))) {\r\n        return;\r\n      }\r\n      const records = row.split(',');\r\n      const strengthRow = {};\r\n      strengthRow['index'] = index++;\r\n      strengthRow['name'] = records[0].trim();\r\n      const values = records.slice(1).filter(x => !this.isEmptyString(x));\r\n      if (columns.length !== values.length) {\r\n        throw new Error('error: the number of column is not same among all rows');\r\n      }\r\n      strengthRow['originalVector'] = values.map(v => parseFloat(v.trim()));\r\n      strengthRow['vector'] = values.map(v => parseFloat(v.trim()));\r\n      \r\n      strengthRows.push(strengthRow);\r\n    });\r\n  \r\n    console.log(`${strengthRows.length} rows are loaded`);\r\n  \r\n    return { columns, strengthRows};\r\n  }\r\n  \r\n  // load strategy info from text and add params to strength table\r\n  loadStrategyInfoToStrTable(strategiesText, strengthRows) {\r\n    strategiesText = strategiesText.replace('\\r\\n', '\\n');\r\n    const strategiesRows = strategiesText.split('\\n');\r\n  \r\n    strategiesRows.slice(1).forEach(strategiesRow => {\r\n      if (strategiesRow.split(',').every(x => this.isEmptyString(x))) {\r\n        return;\r\n      }\r\n  \r\n      const records = strategiesRow.split(',');\r\n      if (records.length < 3) {\r\n        throw new Error('error: invalid strategies records');\r\n      }\r\n  \r\n      const index = parseInt(records[0].trim());\r\n      const name = records[1].trim();\r\n      const type = records[2].trim();\r\n      const hasBoost = (records.length > 3 && records[3].trim() === 'Yes');\r\n  \r\n      if (index > strengthRows.length - 1) {\r\n        throw new Error(`error: index ${index} is out of range of strength table`);\r\n      }\r\n  \r\n      const row = strengthRows[index];\r\n  \r\n      if (row.name !== name) {\r\n        throw new Error(`error: species name ${name} is not match with the row [${index}] of the strength table`);\r\n      }\r\n  \r\n      const validStrategiesType = [\r\n        'Sweeper', 'Tank', 'Wall', 'Support'\r\n      ];\r\n      \r\n      if (validStrategiesType.indexOf(type) < 0) {\r\n        throw new Error(`error: invalid strategy type ${type}`);\r\n      }\r\n  \r\n      row['strategyType'] = type;\r\n      row['hasBoost'] = hasBoost;\r\n    });\r\n  \r\n    if (!strengthRows.find(x => x.hasBoost)) {\r\n      throw new Error('error: no boost attacker is found');\r\n    }\r\n  \r\n    strengthRows.forEach(x => {\r\n      if (!x.strategyType) {\r\n        throw new Error(`error: strategy type of pokemon ${x.name} is not set`);\r\n      }\r\n    });\r\n  }\r\n  \r\n  loadUsageInfo(usageText, columns, strengthRows) {\r\n    usageText = usageText.replace('\\r\\n', '\\n');\r\n  \r\n    const usageRows = usageText.split('\\n');\r\n    const usageInfo = [];\r\n    const usageMap = new Map();\r\n    usageRows.slice(1).forEach(row => {\r\n      if (!row) {\r\n        return;\r\n      }\r\n    \r\n      if (row.split(',').every(x => this.isEmptyString(x))) {\r\n        return;\r\n      }\r\n    \r\n      const records = row.split(',');\r\n      if (records.length < 2) {\r\n        throw new Error('error: invalid usage records');\r\n      }\r\n    \r\n      const name = records[0].trim();\r\n      const usage = parseFloat(records[1].trim());\r\n      usageMap.set(name, usage);\r\n    \r\n      usageInfo.push({name, usage});\r\n    });\r\n    \r\n    const usageBaseRatio = [];\r\n    for (let i = 0; i < columns.length; i++) {\r\n      if (usageMap.get(columns[i]) === undefined) {\r\n        throw new Error(`error: usage information for pokemon ${columns[i]} is not found`);\r\n      }\r\n  \r\n      const duplicateCounts = columns.filter(x => x === columns[i]).length;\r\n      usageBaseRatio[i] = usageMap.get(columns[i]) / duplicateCounts;\r\n    }\r\n  \r\n    strengthRows.forEach(row => {\r\n      for (let i = 0; i < columns.length; i++) {\r\n        row.vector[i] *= (usageBaseRatio[i] / 100);\r\n      }\r\n    })\r\n  }\r\n\r\n  constructTeamByIngenMethod(strengthRows, firstPokemonIndex) {\r\n    // (1) select the first pokemon\r\n    const firstPoke = strengthRows[firstPokemonIndex];\r\n    console.log(`firstPoke: ${firstPoke.name}\\n`);\r\n    strengthRows = strengthRows.filter(x => x.index != firstPoke.index);\r\n    const compatibleStrTypes = this.compatibleTypes(firstPoke.strategyType);\r\n  \r\n    // (2) search the second pokemon which complements the first pokemon\r\n    const resultStep2 = this.searchMinimumRow(firstPoke.vector, \r\n      this.filterStrengthRows(compatibleStrTypes, strengthRows), (v1, v2) => this.cosineSimilarity(v1, v2));\r\n    const secondPoke = resultStep2.row;\r\n    console.log(`secondPoke: ${secondPoke.name}\\n`);\r\n    strengthRows = strengthRows.filter(x => x.index != secondPoke.index);\r\n  \r\n    // (3)(4) search the third and fourth pokemon which cover weak slots of the first and second\r\n    const vectorFirstAndSecond = this.addVector(firstPoke.vector, secondPoke.vector);\r\n    console.log(JSON.stringify(vectorFirstAndSecond))\r\n    let maximumValueStep34 = Number.MIN_SAFE_INTEGER;\r\n    let thirdPoke = null;\r\n    let fourthPoke = null;\r\n    const filteredStrRows34 = this.filterStrengthRows(compatibleStrTypes, strengthRows);\r\n    // temporary search all combinations\r\n    for (let i = 0; i < filteredStrRows34.length; i++) {\r\n      for (let j = i + 1; j < filteredStrRows34.length; j++) {\r\n        const cropedV1 = [];\r\n        const cropedV2 = [];\r\n        for (let k = 0; k < vectorFirstAndSecond.length; k++) {\r\n          if (vectorFirstAndSecond[k] < 0) {\r\n            cropedV1.push(filteredStrRows34[i].vector[k]);\r\n            cropedV2.push(filteredStrRows34[j].vector[k]);\r\n          }\r\n        }\r\n  \r\n        const combinedVector = this.addVector(cropedV1, cropedV2);\r\n        const cos = this.cosineSimilarity(cropedV1, cropedV2);\r\n        const absSin = Math.sqrt(1 - cos * cos);\r\n        const product = this.dotProduct(combinedVector, combinedVector.map(x => 1.0));\r\n        const value = product * absSin;\r\n  \r\n        console.log(`${filteredStrRows34[i].name} + ${filteredStrRows34[j].name}: ${value}(${product} * ${absSin})`);\r\n        if (value > maximumValueStep34) {\r\n          maximumValueStep34 = value;\r\n          thirdPoke = filteredStrRows34[i];\r\n          fourthPoke = filteredStrRows34[j];\r\n        }\r\n      }\r\n    }\r\n  \r\n    console.log(`thirdPoke: ${thirdPoke.name}`);\r\n    console.log(`fourthPoke: ${fourthPoke.name}\\n`);\r\n    strengthRows = strengthRows.filter(x => x.index != thirdPoke.index);\r\n    strengthRows = strengthRows.filter(x => x.index != fourthPoke.index);\r\n  \r\n  \r\n    // (5) search fifth boost attacker pokemon which leverages weak slots of above 4 pokemons\r\n    const vector4Pokemons = this.addVectors(firstPoke.vector, secondPoke.vector, thirdPoke.vector, fourthPoke.vector);\r\n    console.log(JSON.stringify(vector4Pokemons))\r\n    let maximumValueStep5 = Number.MIN_SAFE_INTEGER;\r\n    const filteredStrRows5 = strengthRows.filter(x => x.hasBoost);\r\n    let fifthPoke = null;\r\n    for (let i = 0; i < filteredStrRows5.length; i++) {\r\n      const cropedV1 = [];\r\n      for (let j = 0; j < vector4Pokemons.length; j++) {\r\n        if (vector4Pokemons[j] < 0) {\r\n          cropedV1.push(filteredStrRows5[i].vector[j]);\r\n        }\r\n      }\r\n  \r\n      const product = this.dotProduct(cropedV1, cropedV1.map(x => 1.0));\r\n      const value = product;\r\n  \r\n      console.log(`${filteredStrRows5[i].name}: ${value}`);\r\n      if (value > maximumValueStep5) {\r\n        maximumValueStep5 = value;\r\n        fifthPoke = filteredStrRows5[i];\r\n      }\r\n    }\r\n  \r\n    console.log(`fifthPoke: ${fifthPoke.name}\\n`);\r\n    strengthRows = strengthRows.filter(x => x.index != fifthPoke.index);\r\n  \r\n    // (6) search sixth pokemon which covers the weakest pokemon of 5\r\n    const vector5Pokemons = this.addVectors(firstPoke.vector, secondPoke.vector, thirdPoke.vector, fourthPoke.vector, fifthPoke.vector);\r\n    console.log(JSON.stringify(vector5Pokemons))\r\n    let weakestSlot = -1;\r\n    let weakestValue = Number.MAX_VALUE;\r\n    for (let i = 0; i < vector5Pokemons.length; i++) {\r\n      const value = vector5Pokemons[i];\r\n      if (value < weakestValue) {\r\n        weakestValue = value;\r\n        weakestSlot = i;\r\n      }\r\n    }\r\n  \r\n    console.log(`weakest slot is ${weakestSlot}(${this.columns[weakestSlot]}): ${weakestValue}`);\r\n  \r\n    const resultStep6 = this.searchMaximumRow(null, strengthRows, (v1, v2) => v2[weakestSlot]);\r\n    const sixthPoke = resultStep6.row;\r\n    console.log(`sixthPoke: ${sixthPoke.name}\\n`);\r\n  \r\n    console.log(`${firstPoke.name} (norm: ${this.dotProduct(firstPoke.vector, firstPoke.vector.map(x => 1))})`);\r\n    console.log(`${secondPoke.name} (norm: ${this.dotProduct(secondPoke.vector, secondPoke.vector.map(x => 1))})`);\r\n    console.log(`${thirdPoke.name} (norm: ${this.dotProduct(thirdPoke.vector, thirdPoke.vector.map(x => 1))})`);\r\n    console.log(`${fourthPoke.name} (norm: ${this.dotProduct(fourthPoke.vector, fourthPoke.vector.map(x => 1))})`);\r\n    console.log(`${fifthPoke.name} (norm: ${this.dotProduct(fifthPoke.vector, fifthPoke.vector.map(x => 1))})`);\r\n    console.log(`${sixthPoke.name} (norm: ${this.dotProduct(sixthPoke.vector, sixthPoke.vector.map(x => 1))})`);\r\n  \r\n    const finalVector = this.addVectors(firstPoke.vector, secondPoke.vector, thirdPoke.vector, fourthPoke.vector, fifthPoke.vector, sixthPoke.vector);\r\n    console.log(JSON.stringify(finalVector));\r\n  }\r\n  \r\n  // search the row which has the minimum value on the evaluation function\r\n  searchMinimumRow(targetVector, strengthRows, evaluationFunc) {\r\n    let minimumValue = Number.MAX_VALUE;\r\n    let minimumRow = null;\r\n    strengthRows.forEach(strRow => {\r\n      const val = evaluationFunc(targetVector, strRow.vector);\r\n      console.log(`${strRow.name}: ${val}`);\r\n      if (val < minimumValue) {\r\n        minimumValue = val;\r\n        minimumRow = strRow;\r\n      }\r\n    });\r\n  \r\n    return { row: minimumRow, value: minimumValue };\r\n  }\r\n  \r\n  searchMaximumRow(targetVector, strengthRows, evaluationFunc) {\r\n    const inverseEvalFunc = (v1, v2) => -1 * evaluationFunc(v1, v2);\r\n    return this.searchMinimumRow(targetVector, strengthRows, inverseEvalFunc);\r\n  }\r\n  \r\n  \r\n  addVectors() {\r\n    const length = arguments[0].length;\r\n    for (let i = 0; i < arguments.length; i++) {\r\n      if (length !== arguments[i].length) {\r\n        throw new Error('the number of elements is not same');\r\n      }\r\n      \r\n    }\r\n  \r\n    const newVec = [];\r\n    for (let i = 0; i < length; i++) {\r\n      let elementsSum = 0;\r\n      for (let j = 0; j < arguments.length; j++) {\r\n        elementsSum += arguments[j][i];\r\n      }\r\n      newVec.push(elementsSum);\r\n    } \r\n  \r\n    return newVec;\r\n  }\r\n  \r\n  addVector(vector1, vector2) {\r\n    if (vector1.length !== vector2.length) {\r\n      throw new Error('the number of elements is not same');\r\n    }\r\n  \r\n    const newVec = [];\r\n    for (let i = 0; i < vector1.length; i++) {\r\n      newVec.push(vector1[i] + vector2[i]);\r\n    } \r\n  \r\n    return newVec;\r\n  }\r\n  \r\n  cosineSimilarity(v1, v2) {\r\n    return this.dotProduct(v1, v2) / (this.l2norm(v1) * this.l2norm(v2));\r\n  }\r\n  \r\n  dotProduct(vector1, vector2) {\r\n    if (vector1.length !== vector2.length) {\r\n      throw new Error('the number of elements is not same');\r\n    }\r\n  \r\n    let sum = 0;\r\n    for (let i = 0; i < vector1.length; i++) {\r\n      sum += vector1[i] * vector2[i];\r\n    }\r\n  \r\n    return sum;\r\n  }\r\n  \r\n  l2norm(vector) {\r\n    let sum = 0;\r\n    vector.forEach(x => {\r\n      sum += x * x;\r\n    });\r\n  \r\n    sum = Math.sqrt(sum);\r\n    return sum;\r\n  }\r\n  \r\n  isEmptyString(x) {\r\n    return (x === '' || x === '\\n' || x === '\\r');\r\n  }\r\n  \r\n  compatibleTypes(strategyType) {\r\n    let compatibleTypes = [];\r\n  \r\n    if (strategyType === 'Sweeper') {\r\n      compatibleTypes = ['Sweeper', 'Tank'];\r\n    } else if (strategyType === 'Tank') {\r\n      compatibleTypes = ['Sweeper', 'Tank', 'Wall'];\r\n    } else if (strategyType === 'Wall') {\r\n      compatibleTypes = ['Tank', 'Wall'];\r\n    }\r\n  \r\n    return compatibleTypes;\r\n  }\r\n  \r\n  filterStrengthRows(acceptableTypes, strengthRows) {\r\n    return strengthRows.filter(x => acceptableTypes.indexOf(x.strategyType) >= 0);\r\n  }\r\n\r\n  getAllTeamPokemonNames() {\r\n    // we can get all team (candidate) pokemon names also from the strategy info\r\n    // which is better?\r\n\r\n    return this.strengthRows.map(row => row.name);\r\n  }\r\n\r\n  getAllTargetPokemonNames() {\r\n    return this.columns;\r\n  }\r\n\r\n  strValuesOfTeam(teamPokemonIndices) {\r\n    // is it needed to remove duplications about team members?\r\n\r\n    if (!teamPokemonIndices || teamPokemonIndices.length === 0) {\r\n      const allZero = [];\r\n      for (let i = 0; i < this.columns; i++) {\r\n        allZero.push(0);\r\n      }\r\n      return allZero;\r\n    }\r\n\r\n    const pokemonVectors = teamPokemonIndices.map(pokeIndexStr => {\r\n      const pokeIndex = parseInt(pokeIndexStr);\r\n\r\n      if (!(0 <= pokeIndex && pokeIndex <= this.strengthRows.length - 1)) {\r\n        throw new Error ('Error: pokemon index is out of the range');\r\n      }\r\n\r\n      const row = this.strengthRows[pokeIndex];\r\n      return row.vector;\r\n    });\r\n\r\n    const combinedVector = this.addVectors(...pokemonVectors);\r\n\r\n    return combinedVector;\r\n  }\r\n}","import React from 'react';\r\nimport { Container, Row, Col } from 'react-bootstrap'\r\nimport { SearchComponent } from './searchComponent';\r\nimport { GraphComponent } from './graphComponent';\r\nimport { TeamComponent } from './TeamComponent';\r\nimport { CombinationService } from '../services/combination-service';\r\n\r\nexport class TeamBuilderComponent extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.combinationService = new CombinationService();\r\n    this.state = { \r\n      loading: true,\r\n      teamPokemonIndices: [\"18\", \"11\", \"23\", \"25\", \"2\", \"21\"] // default in teamComponent\r\n    };\r\n    this.combinationService.loadMasterData().then(data => {\r\n      const allTeamPokemonNames = this.combinationService.getAllTeamPokemonNames();\r\n      const teamPokemonNameMap = allTeamPokemonNames.map((name, index) => ({id: index.toString(), name: name}));\r\n      this.setState({ \r\n        loading: false, \r\n        strVectorColumns: this.combinationService.getAllTargetPokemonNames(),\r\n        teamPokemonNameMap: teamPokemonNameMap \r\n      });\r\n    }, error => {\r\n      this.setState({ loading: false });\r\n      console.log(error);\r\n      throw new Error('Error: failed to init combinationService');\r\n    });\r\n  }\r\n\r\n  onChangeTeamPokemons(indices) {\r\n    this.setState({ teamPokemonIndices: indices });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.loading) {\r\n      return <span>Loading...</span>\r\n    } else {  \r\n      const teamStrengthValues = this.combinationService.strValuesOfTeam(this.state.teamPokemonIndices);\r\n\r\n      return (\r\n        <>\r\n          <Container fluid className=\"mt-3\">\r\n            <Row>\r\n              <Col md={3}>\r\n                <TeamComponent num={6} pokemonList={this.state.teamPokemonNameMap} onChange={(indices) => this.onChangeTeamPokemons(indices)}></TeamComponent>\r\n              </Col>\r\n              {/* <Col md={3}>\r\n                <SearchComponent></SearchComponent>\r\n              </Col>\r\n              <Col md={6}>\r\n                <SearchComponent></SearchComponent>\r\n              </Col> */}\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n    \r\n              </Col>\r\n              <Col>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n          <GraphComponent labels={this.state.strVectorColumns} values={teamStrengthValues}/>\r\n        </>\r\n    )};    \r\n  }\r\n}\r\n","import React from 'react';\r\n// import './App.css';\r\nimport { Navbar } from 'react-bootstrap';\r\nimport { TeamBuilderComponent } from './components/teamBuilderComponent';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Navbar bg=\"light\">\r\n        <Navbar.Brand>Pokémon VGC Team Combination Calculator</Navbar.Brand>\r\n      </Navbar>\r\n      <TeamBuilderComponent></TeamBuilderComponent>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/strength-table.d04147c7.csv\";","module.exports = __webpack_public_path__ + \"static/media/strategies.b4b7486a.csv\";"],"sourceRoot":""}